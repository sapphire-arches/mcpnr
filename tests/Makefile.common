ifndef MODULE_NAME
  $(error Common module included without setting MODULE_NAME)
endif

#
# Module file names
#

MODULE_TECHMAP_SCRIPT = $(MODULE_NAME).ys
MODULE_TECHMAPPED = $(MODULE_NAME).yosys-design
MODULE_PLACED = $(MODULE_NAME).mcpnr-placement
MODULE_ROUTED = $(MODULE_NAME).json

EXTRA_FILES += yosys.log

#
# Find where we are
#
mkfile_path := $(realpath $(lastword $(MAKEFILE_LIST)))
current_dir := $(dir $(mkfile_path))

#
# Common definitions for the MCPNR tools
#
MCPNR_WORKSPACE_ROOT ?= $(current_dir)/../pnr/
MCPNR_BUILD_FLAVOR ?= debug
MCPNR_TARGET_DIR ?= $(abspath $(MCPNR_WORKSPACE_ROOT)/target/$(MCPNR_BUILD_FLAVOR))

MCPNR_YOSYS_PLUGIN_DIR ?= $(abspath $(current_dir)/../yosys-synth_mc)
SYNTH_MC_TECHLIB_DIR ?= $(MCPNR_YOSYS_PLUGIN_DIR)/techlib
MCPNR_YOSYS_PLUGIN ?= $(MCPNR_YOSYS_PLUGIN_DIR)/synth_mc.so

MCPNR_TECHLIB_FILES = \
  $(SYNTH_MC_TECHLIB_DIR)/minecraft.lib \
  $(SYNTH_MC_TECHLIB_DIR)/cells_sim.v \

#
# Tool locations
#
PYTHON3 ?= python3
YOSYS_SCRIPT_GENERATE = $(abspath $(current_dir)/generate_script.py)

ifndef MODULE_SIZE_X
  MODULE_SIZE_X = 192
endif
ifndef MODULE_SIZE_Z
  MODULE_SIZE_Z = 192
endif

PLACEMENT_TOOL ?= $(MCPNR_TARGET_DIR)/mcpnr-placement
PLACEMENT_TOOL_CMD ?= $(PLACEMENT_TOOL) place \
    --techlib $(SYNTH_MC_TECHLIB_DIR) \
    --size-x $(MODULE_SIZE_X) \
    --size-z $(MODULE_SIZE_Z)

ROUTING_TOOL ?= $(MCPNR_TARGET_DIR)/mcpnr-routing
ROUTING_TOOL_CMD ?= $(ROUTING_TOOL) --techlib $(SYNTH_MC_TECHLIB_DIR)

INSTALL_TOOL ?= $(abspath $(current_dir)/../pnr/routed-to-world/convert.py)

#
# Meta targets
#
all: $(MODULE_ROUTED)

.DEFAULT_GOAL := all

clean:
	rm -f $(MODULE_TECHMAP_SCRIPT) $(MODULE_ROUTED) $(MODULE_TECHMAPPED) $(MODULE_PLACED) $(EXTRA_FILES)

.PHONY: all clean

#
# Utility targets
#
QUIET_CMD = @printf "[ %15s ] %s\n" $1 $@ &&

decode-placed: $(MODULE_PLACED)
	@protoc --decode=mcpnr.PlacedDesign \
	  --descriptor_set_in=$$(find $(MCPNR_TARGET_DIR) -name 'file_descriptor_set.protobuf' | head -n 1) \
	 < $(MODULE_PLACED)

WORLD_NAME ?=Designs
install-to-world: $(MODULE_ROUTED) $(INSTALL_TOOL)
	$(call QUIET_CMD,PYTHON3) $(PYTHON3) $(INSTALL_TOOL) $(MODULE_ROUTED) "${HOME}/.minecraft/saves/$(WORLD_NAME)"

#
# Actual build rules
#

YOSYS_SCRIPT_GENERATE_CMD = $(PYTHON3) $(YOSYS_SCRIPT_GENERATE) \
  --techlib $(SYNTH_MC_TECHLIB_DIR) \
  --plugin $(MCPNR_YOSYS_PLUGIN) \
  --output $(MODULE_TECHMAPPED) \
  --verilog $(MODULE_NAME).v \
  $@

$(MODULE_TECHMAP_SCRIPT): $(YOSYS_SCRIPT_GENERATE)
	$(call QUIET_CMD,PYTHON) $(YOSYS_SCRIPT_GENERATE_CMD)

$(MODULE_TECHMAPPED) : $(MODULE_NAME).v $(MODULE_TECHMAP_SCRIPT) $(MCPNR_YOSYS_PLUGIN) $(MCPNR_TECHLIB_FILES)
	$(call QUIET_CMD,YOSYS) yosys -s $(MODULE_NAME).ys > yosys.log

$(MODULE_PLACED) : $(MODULE_TECHMAPPED) $(PLACEMENT_TOOL)
	$(call QUIET_CMD,PLACE) $(PLACEMENT_TOOL_CMD) $< $@

$(MODULE_ROUTED) : $(MODULE_PLACED) $(ROUTING_TOOL)
	$(call QUIET_CMD,ROUTE) $(ROUTING_TOOL_CMD) $< $@

#
# Build rules for tools
#
$(MCPNR_YOSYS_PLUGIN_DIR):

$(MCPNR_YOSYS_PLUGIN): $(MCPNR_YOSYS_PLUGIN_DIR)
	$(call QUIET_CMD,SUBMAKE) $(MAKE) -C $(MCPNR_YOSYS_PLUGIN_DIR)

.PHONY: $(MCPNR_YOSYS_PLUGIN_DIR)

# Include the depfiles generated by cargo so we know when to rebuild pnr tools
include $(wildcard $(MCPNR_TARGET_DIR)/*.d)

ifeq ($(MCPNR_BUILD_FLAVOR),release)
  CARGO_RELEASE_ARG=--release
else
  CARGO_RELEASE_ARG=
endif

$(ROUTING_TOOL):
	cd $(current_dir)/../pnr && cargo build $(CARGO_RELEASE_ARG) -p mcpnr-routing

$(PLACEMENT_TOOL):
	cd $(current_dir)/../pnr && cargo build $(CARGO_RELEASE_ARG) -p mcpnr-placement
